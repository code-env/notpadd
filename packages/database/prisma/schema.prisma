datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  output        = "../generated/client"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

enum ProjectStatus {
  Draft
  Published
  Archived
}

enum MemberRole {
  Owner
  Member
  Moderator
  Editor
}

enum UserRole {
  Admin
  User
}

enum AccountType {
  Free
  Basic
  Premium
  Enterprise
}

model User {
  id                          String                        @id
  createdAt                   DateTime                      @default(now())
  email                       String                        @unique
  name                        String?
  member                      Member[]
  spaces                      Space[]
  imageUrl                    String?
  accounttype                 AccountType                   @default(Free)
  role                        UserRole                      @default(User)
  AuthorizedAccessCredentials AuthorizedAccessCredentials[]
  craetedAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  activity                    Activity[]
}

model Team {
  id         String   @id @default(cuid())
  name       String
  creatorId  String
  members    Member[]
  inviteCode String?  @unique
  secretKey  String?  @unique
  imageUrl   String?
  imageBlur  String?

  craetedAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  membersLifeTimeCount Int      @default(0)

  Space    Space[]
  Invite   Invite[]
  activity Activity[]
}

model Member {
  id        String     @id @default(cuid())
  teamId    String
  role      MemberRole @default(Member)
  user      User       @relation(fields: [userId], references: [id])
  team      Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId    String
  craetedAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Article   Article[]
}

model Space {
  id                          String                        @id
  name                        String
  description                 String?
  teamId                      String
  team                        Team                          @relation(fields: [teamId], references: [id])
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  AuthorizedAccessCredentials AuthorizedAccessCredentials[]
  User                        User?                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                      String
  articles                    Article[]
  articlecount                Int                           @default(0)
  secretKey                   String?                       @unique
  ghFinedGrainedToken         String?                       @unique
  ghUsername                  String?                       @unique
  ghRepository                String?                       @unique
  DeployedProjectUrl          String?                       @unique
  activity                    Activity[]

  @@unique([teamId, secretKey])
}

model Article {
  id           String        @id
  slug         String        @unique
  title        String
  description  String?
  status       ProjectStatus @default(Draft)
  content      Json?
  previewImage String?
  previewBlur  String?
  memberId     String
  member       Member        @relation(fields: [memberId], references: [id], onDelete: Cascade)
  spaceId      String
  space        Space         @relation(fields: [spaceId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  activity     Activity[]

  @@unique([slug, spaceId])
  @@index([spaceId])
}

model AuthorizedAccessCredentials {
  id                   String   @id @unique @default(uuid())
  userId               String
  User                 User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  spaceId              String
  Space                Space?   @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  next_notpadd_userId  String
  next_notpadd_spaceId String   @unique @default(uuid())
  secretkey            String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Subscription {
  id        String   @id @default(cuid())
  plan      String
  price     Float
  currency  String
  interval  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invite {
  id        String   @id @default(cuid())
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  validDate DateTime
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  used      Boolean  @default(false)
  createdBy String?

  @@unique([teamId, code])
}

enum ActivityType {
  member_added
  member_removed
  role_changed
  space_created
  space_updated
  space_deleted
  article_created
  article_updated
  article_deleted
  article_published
  article_unpublished
  article_archived
  article_unarchived
  article_restored
  article_trashed
  invite_created
  invite_used
  team_updated
}

model Activity {
  id          String       @id @default(cuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        ActivityType
  teamId      String
  team        Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  spaceId     String?
  space       Space?       @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  articleId   String?
  article     Article?     @relation(fields: [articleId], references: [id], onDelete: Cascade)
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
